'use client'

import { useState } from 'react'
import { Calendar, Clock, Video, Mail, CheckCircle, ExternalLink, AlertCircle } from 'lucide-react'

export default function BookingSystemEnhanced() {
  const [bookingType, setBookingType] = useState<'consultation' | 'studio' | 'production'>('consultation')
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [bookingStatus, setBookingStatus] = useState<'idle' | 'success' | 'error'>('idle')
  const [statusMessage, setStatusMessage] = useState<string>('')

  // Fallback links if API is not configured
  const googleCalendarLink = 'https://calendar.google.com/calendar/appointments/schedules/AcZssZ1234567890' // Replace with your actual link
  const googleFormLink = 'https://forms.gle/your-form-id' // Replace with actual Google Form

  const handleApiBooking = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault()
    setIsSubmitting(true)
    setBookingStatus('idle')

    const formData = new FormData(e.currentTarget)

    // Prepare booking data
    const bookingData = {
      clientName: formData.get('name') as string,
      clientEmail: formData.get('email') as string,
      company: formData.get('company') as string,
      phone: formData.get('phone') as string,
      type: bookingType,
      date: new Date(formData.get('date') as string),
      duration: parseInt(formData.get('duration') as string),
      description: formData.get('message') as string,
    }

    try {
      // First check availability
      const availabilityRes = await fetch('/api/booking/check-availability', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          date: bookingData.date,
          duration: bookingData.duration
        })
      })

      const availability = await availabilityRes.json()

      if (!availability.available) {
        setBookingStatus('error')
        setStatusMessage('This time slot is not available. Please choose another time.')
        setIsSubmitting(false)
        return
      }

      // Create the booking
      const bookingRes = await fetch('/api/booking/create', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(bookingData)
      })

      const result = await bookingRes.json()

      if (result.success) {
        setBookingStatus('success')
        setStatusMessage('✅ Booking confirmed! Check your email for details.')
        // Reset form
        (e.target as HTMLFormElement).reset()
      } else {
        throw new Error(result.error || 'Booking failed')
      }
    } catch (error) {
      console.error('Booking error:', error)
      setBookingStatus('error')
      setStatusMessage('⚠️ API booking not configured. Please use the manual booking option below.')
    } finally {
      setIsSubmitting(false)
    }
  }

  return (
    <div className="space-y-8">
      {/* Booking Type Selection */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        <button
          onClick={() => setBookingType('consultation')}
          className={`p-6 border transition-all ${
            bookingType === 'consultation'
              ? 'border-studio-blue bg-studio-blue/10'
              : 'border-studio-gray hover:border-studio-blue'
          }`}
        >
          <Video className="w-8 h-8 mb-3 text-studio-blue" />
          <h3 className="font-bold mb-1">Initial Consultation</h3>
          <p className="text-sm text-gray-400">30-min video call to discuss your project</p>
        </button>

        <button
          onClick={() => setBookingType('studio')}
          className={`p-6 border transition-all ${
            bookingType === 'studio'
              ? 'border-studio-blue bg-studio-blue/10'
              : 'border-studio-gray hover:border-studio-blue'
          }`}
        >
          <Calendar className="w-8 h-8 mb-3 text-studio-blue" />
          <h3 className="font-bold mb-1">Studio Booking</h3>
          <p className="text-sm text-gray-400">Reserve studio space & equipment</p>
        </button>

        <button
          onClick={() => setBookingType('production')}
          className={`p-6 border transition-all ${
            bookingType === 'production'
              ? 'border-studio-blue bg-studio-blue/10'
              : 'border-studio-gray hover:border-studio-blue'
          }`}
        >
          <Clock className="w-8 h-8 mb-3 text-studio-blue" />
          <h3 className="font-bold mb-1">Production Schedule</h3>
          <p className="text-sm text-gray-400">Book full production services</p>
        </button>
      </div>

      {/* API Booking Form */}
      <div className="bg-studio-gray p-8 rounded-lg">
        <h2 className="text-2xl font-bold mb-3">
          {bookingType === 'consultation' && 'Schedule a Consultation'}
          {bookingType === 'studio' && 'Reserve Studio & Equipment'}
          {bookingType === 'production' && 'Full Production Booking'}
        </h2>

        <form onSubmit={handleApiBooking} className="space-y-6 mt-6">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <label className="block text-sm font-medium mb-2">Name *</label>
              <input
                type="text"
                name="name"
                required
                className="w-full px-4 py-2 bg-studio-black border border-studio-gray rounded focus:border-studio-blue focus:outline-none"
              />
            </div>

            <div>
              <label className="block text-sm font-medium mb-2">Email *</label>
              <input
                type="email"
                name="email"
                required
                className="w-full px-4 py-2 bg-studio-black border border-studio-gray rounded focus:border-studio-blue focus:outline-none"
              />
            </div>

            <div>
              <label className="block text-sm font-medium mb-2">Company/Agency *</label>
              <input
                type="text"
                name="company"
                required
                className="w-full px-4 py-2 bg-studio-black border border-studio-gray rounded focus:border-studio-blue focus:outline-none"
              />
            </div>

            <div>
              <label className="block text-sm font-medium mb-2">Phone</label>
              <input
                type="tel"
                name="phone"
                className="w-full px-4 py-2 bg-studio-black border border-studio-gray rounded focus:border-studio-blue focus:outline-none"
              />
            </div>

            <div>
              <label className="block text-sm font-medium mb-2">Date & Time *</label>
              <input
                type="datetime-local"
                name="date"
                required
                min={new Date().toISOString().slice(0, 16)}
                className="w-full px-4 py-2 bg-studio-black border border-studio-gray rounded focus:border-studio-blue focus:outline-none"
              />
            </div>

            <div>
              <label className="block text-sm font-medium mb-2">Duration *</label>
              <select
                name="duration"
                required
                className="w-full px-4 py-2 bg-studio-black border border-studio-gray rounded focus:border-studio-blue focus:outline-none"
              >
                {bookingType === 'consultation' ? (
                  <>
                    <option value="30">30 minutes</option>
                    <option value="60">60 minutes</option>
                  </>
                ) : (
                  <>
                    <option value="60">1 hour</option>
                    <option value="120">2 hours</option>
                    <option value="240">Half day (4 hours)</option>
                    <option value="480">Full day (8 hours)</option>
                    <option value="960">2 days</option>
                    <option value="1440">3 days</option>
                  </>
                )}
              </select>
            </div>
          </div>

          <div>
            <label className="block text-sm font-medium mb-2">Project Description</label>
            <textarea
              name="message"
              rows={4}
              className="w-full px-4 py-2 bg-studio-black border border-studio-gray rounded focus:border-studio-blue focus:outline-none"
              placeholder="Tell us about your project requirements..."
            />
          </div>

          <button
            type="submit"
            disabled={isSubmitting}
            className="w-full py-3 bg-studio-blue text-white font-bold rounded hover:bg-opacity-90 transition-all disabled:opacity-50 disabled:cursor-not-allowed"
          >
            {isSubmitting ? 'Processing...' : 'Book Now'}
          </button>
        </form>

        {/* Status Messages */}
        {bookingStatus === 'success' && (
          <div className="mt-6 p-4 bg-green-900/20 border border-green-500 rounded">
            <p className="flex items-center gap-2">
              <CheckCircle className="w-5 h-5 text-green-500" />
              <span>{statusMessage}</span>
            </p>
          </div>
        )}

        {bookingStatus === 'error' && (
          <div className="mt-6 p-4 bg-red-900/20 border border-red-500 rounded">
            <p className="flex items-center gap-2">
              <AlertCircle className="w-5 h-5 text-red-500" />
              <span>{statusMessage}</span>
            </p>
          </div>
        )}
      </div>

      {/* Fallback Options */}
      <div className="bg-studio-black/50 p-6 rounded-lg border border-studio-gray">
        <h3 className="font-bold mb-4">Alternative Booking Options</h3>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <a
            href={googleCalendarLink}
            target="_blank"
            rel="noopener noreferrer"
            className="flex items-center justify-center gap-2 px-4 py-3 border border-studio-blue text-studio-blue hover:bg-studio-blue hover:text-white transition-all"
          >
            <Calendar className="w-5 h-5" />
            Google Calendar
            <ExternalLink size={14} />
          </a>

          <a
            href="mailto:business@w9studio.net?subject=Booking Request"
            className="flex items-center justify-center gap-2 px-4 py-3 border border-studio-blue text-studio-blue hover:bg-studio-blue hover:text-white transition-all"
          >
            <Mail className="w-5 h-5" />
            Email Direct
          </a>
        </div>
      </div>

      {/* Google Workspace Integration Note */}
      <div className="text-center text-sm text-gray-500">
        <p>
          All bookings are managed through our Google Workspace system at{' '}
          <span className="text-studio-blue">w9studio.net</span>
        </p>
        <p className="mt-1">
          Calendar invites and confirmations will be sent from{' '}
          <span className="text-studio-blue">business@w9studio.net</span>
        </p>
      </div>
    </div>
  )
}