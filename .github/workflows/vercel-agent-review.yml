name: Vercel Agent Review
on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

concurrency:
  group: review-${{ github.ref }}
  cancel-in-progress: true

jobs:
  review:
    if: ${{ vars.CI_ENABLED == '1' }}
    runs-on: ${{ vars.USE_SELF_HOSTED == '1' && 'self-hosted' || 'ubuntu-latest' }}
    permissions:
      contents: read
      pull-requests: write
      security-events: write  # for SARIF upload

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Supply-chain: blocks malicious dep upgrades in PR
      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: high
          comment-summary-in-pr: true

      - name: Run Vercel Agent review
        env:
          BASE_REF: ${{ github.event.pull_request.base.ref }}
          HEAD_REF: ${{ github.event.pull_request.head.sha }}
          GIT_SHA: ${{ github.sha }}
        run: node scripts/review/run-review.js

      - name: Optional deep scans (Semgrep/Gitleaks if present)
        run: |
          bash scripts/review/run-semgrep.sh || true
          bash scripts/review/run-gitleaks.sh || true

      - name: Generate SARIF from Vercel Agent report
        run: node scripts/review/report-sarif.js

      - name: Upload SARIF to code scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: .agents/**/vercel-agent/report.sarif

      - name: Upload review artifacts
        uses: actions/upload-artifact@v4
        with:
          name: vercel-agent-review-${{ github.sha }}
          path: .agents/**/vercel-agent/**

      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const glob = require('glob');
            const files = glob.sync('.agents/**/vercel-agent/report.md');
            const body = files.length ? fs.readFileSync(files[0], 'utf8') : 'No report found.';
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body
            });